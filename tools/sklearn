#!/bin/bash

set -e
pushd $(cd $(dirname ${0})/..; pwd) > /dev/null

env_dir=./third_party/env/scikit-learn
src_dir=./third_party/source/scikit-learn

case "${OSTYPE}" in
    msys*) python="winpty python";;
    *) python="python";;
esac

venv() {
    env_dir=${env_dir}
    [ -d "${env_dir}" ] || ${python} -m venv ${env_dir}
    case "${OSTYPE}" in
        msys*) source ${env_dir}/Scripts/activate;;
        *) source ${env_dir}/bin/activate;;
    esac
    ${python} -m pip install --quiet --upgrade pip setuptools wheel
}

clean() {
    echo "sklearn clean"
    rm -rf "${env_dir}"
    rm -rf "${src_dir}"
}

sync() {
    echo "sklearn sync"
    if [ ! -d "${src_dir}" ]; then
        git clone --quiet --depth=1 --branch main --single-branch https://github.com/scikit-learn/scikit-learn.git "${src_dir}"
    else
        git -C "${src_dir}" fetch --quiet --depth=1 origin main
        git -C "${src_dir}" reset --quiet --hard FETCH_HEAD
        git -C "${src_dir}" gc --quiet --prune=all
    fi
}

install() {
    echo "sklearn install"
    venv
    ${python} -m pip install --quiet scipy
    ${python} -m pip install --quiet scikit-learn --pre --extra-index https://pypi.anaconda.org/scipy-wheels-nightly/simple
    deactivate
}

metadata() {
    echo "sklearn metadata"
    [[ $(grep -U $'\x0D' ./source/sklearn-metadata.json) ]] && crlf=1
    venv
    export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    ${python} ./tools/sklearn_script.py
    deactivate
    if [[ -n ${crlf} ]]; then
        unix2dos --quiet --newfile ./source/sklearn-metadata.json ./source/sklearn-metadata.json
    fi
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "sync") sync;;
        "install") install;;
        "metadata") metadata;;
    esac
done
